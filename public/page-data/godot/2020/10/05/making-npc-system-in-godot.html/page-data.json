{"componentChunkName":"component---src-templates-post-layout-jsx","path":"/godot/2020/10/05/making-npc-system-in-godot.html","result":{"data":{"markdownRemark":{"html":"<h1 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h1>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li>\n<p><a href=\"#dialogue\">Dialogue</a></p>\n<ul>\n<li><a href=\"#data-model\">Data Model</a></li>\n<li><a href=\"#rendering-dialogue\">Rendering Dialogue</a></li>\n<li><a href=\"#gibberish-chatter\">Gibberish Chatter</a></li>\n<li><a href=\"#adding-items\">Adding items</a></li>\n</ul>\n</li>\n<li><a href=\"#schedules\">Schedules</a></li>\n<li><a href=\"#navigation\">Navigation</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>For the game I am working on (which I will create another blog post about at another\ntime), I needed NPCs that the player could interact with\nand make the game world feel lived in and lively. These characters needed to be able\nto have conversations with the player, they needed to have things that they spent\ntheir days doing, and they needed to be able to do things on special days of the year.</p>\n<p>The player needed to feel like the world was lived in, and that they are coming to\nthis place, not that this place was made for them.</p>\n<p>So I set out to implement everything. A few of my requirements:</p>\n<ul>\n<li>Built in C# (as my whole game is in C#, not gdscript).</li>\n<li>Extensible for my needs.</li>\n<li>Easily configurable on a per-NPC basis.</li>\n</ul>\n<h1 id=\"dialogue\" style=\"position:relative;\"><a href=\"#dialogue\" aria-label=\"dialogue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dialogue</h1>\n<div style=\"display: flex; justify-content: center;\">\n    <video width=\"720\" height=\"480\" controls>\n        <source src=\"/assets/videos/dialogue_window.mp4\" type=\"video/mp4\">\n        Your browser does not support the video tag.\n    </video>\n</div>\n<p>While Godot has a number of dialogue systems out there, they are all built in\ngdscript, so they weren't going to be usable for me. So I set out to building my\nown. Many of the dialogue tools out there use JSON as the configuration format,\nand often even have a fancy node-based editor for building the trees with.\nThis is great, but I didn't want to have to build an editor for it, and JSON just\nisn't that human-friendly (not to mention, JSON doesn't have good support for multiline\nstrings!), so I needed a different solution.</p>\n<p>While I did end up supporting JSON, I also decided I wanted to support YAML,\nand my reasoning behind it is that it is human readable and easy enough to write\nand modify that my partner, who is the artist, should be able to easily read and\nwrite these files, without having to understand all the different symbols or\nstructure of JSON, just has to understand indentation.</p>\n<h2 id=\"data-model\" style=\"position:relative;\"><a href=\"#data-model\" aria-label=\"data model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Model</h2>\n<p>I ended up using the <a href=\"https://github.com/aaubry/YamlDotNet\">YamlDotNet</a> package\nfor reading in the yaml files.</p>\n<p>After I got that figured out, I created my DialogueManager and got started.\nThe DialogueManager class lives on a Control node and controls all of the UI\nelements as well as reading and displaying the Dialogue. The DialogueManager\ngets passed the path to a YAML or JSON file, and will read it in, building up the\nDialogue object:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PH<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span>DialogueSystem</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Dialogue</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Conversation</span> Introduction <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Conversation<span class=\"token punctuation\">></span></span> Conversations <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Response</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> To <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Conversation</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Text <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> To <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Response<span class=\"token punctuation\">></span></span> Responses <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> Conditions <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Animation <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> Conversation <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> to<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n            To <span class=\"token operator\">=</span> to<span class=\"token punctuation\">;</span>\n            Responses <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            Conditions <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            Animation <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> Conversation <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n            To <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            Responses <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            Conditions <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            Animation <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see above, we have a <code class=\"language-text\">Dialogue</code> object that has a name for the NPC,\nan introduction conversation, and a collection of conversations denoted by a string\nidentifier. Each conversation point has some Text, where it can go to afterwards or\nalternatively some responses the player can give (allowing branching), some conditions\nfor why the dialogue should appear (such as day, time, special events, etc.),\nand animation to play on the character. Now, the animation to play is likely to change\nwhen we implement character portraits, as we made the decision after this was built\nthat we were going to end up doing that.</p>\n<p>And here is what that data object translates to, YAML wise:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Jo\n<span class=\"token key atrule\">introduction</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    Hello!\n    Here are some tools to get you started!</span>\n\n    <span class=\"token punctuation\">[</span>item path=Tools/Hoe.tscn<span class=\"token punctuation\">]</span>Jo gave you a Hoe<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>item path=Tools/Sickle.tscn<span class=\"token punctuation\">]</span>Jo gave you a Sickle<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>item path=Tools/WateringCan.tscn<span class=\"token punctuation\">]</span>Jo gave you a Watering Can<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>item path=Tools/Axe.tscn<span class=\"token punctuation\">]</span>Jo gave you an Axe<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">responses</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cool<span class=\"token tag\">!</span>\n      <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span> intro<span class=\"token punctuation\">-</span>continue\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Bye<span class=\"token tag\">!</span>\n      <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span> close\n<span class=\"token key atrule\">conversations</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">intro-continue</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">conditions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      You have a lot of farming to do! Here, take these!</span>\n\n      <span class=\"token punctuation\">[</span>item path=Seeds/CarrotSeeds.tscn count=20<span class=\"token punctuation\">]</span>Added 20 Carrot Seeds<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>item path=Seeds/PumpkinSeeds.tscn count=20<span class=\"token punctuation\">]</span>Added 20 Pumpkin Seeds<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>item path=Seeds/MandrakeSeeds.tscn count=20<span class=\"token punctuation\">]</span>Added 20 Mandrake Seeds<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span> close\n  <span class=\"token key atrule\">special-rainbow</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> This is a <span class=\"token punctuation\">[</span>rainbow<span class=\"token punctuation\">]</span>special<span class=\"token punctuation\">[</span>/rainbow<span class=\"token punctuation\">]</span> dialog<span class=\"token tag\">!</span>\n    <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span> close\n    <span class=\"token key atrule\">conditions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">relationshipLevel</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token key atrule\">season</span><span class=\"token punctuation\">:</span> Spring\n  <span class=\"token key atrule\">sprint-generic</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> I don't know who you are<span class=\"token punctuation\">,</span> but I have a good feeling about you<span class=\"token tag\">!</span>\n    <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span> sprint<span class=\"token punctuation\">-</span>generic<span class=\"token punctuation\">-</span><span class=\"token number\">2</span>\n    <span class=\"token key atrule\">conditions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">relationshipLevel</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token key atrule\">season</span><span class=\"token punctuation\">:</span> Spring\n  <span class=\"token key atrule\">spring-generic-2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      I wish you the best in everything.</span>\n\n      <span class=\"token punctuation\">[</span>item path=Seeds/CarrotSeeds.tscn count=5<span class=\"token punctuation\">]</span>Added 5 Carrot Seeds<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>item path=Seeds/PumpkinSeeds.tscn count=5<span class=\"token punctuation\">]</span>Added 5 Pumpkin Seeds<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>item path=Seeds/MandrakeSeeds.tscn count=5<span class=\"token punctuation\">]</span>Added 5 Mandrake Seeds<span class=\"token tag\">!</span><span class=\"token punctuation\">[</span>/item<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span> close</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now, there is a lot more going on there, specifically related to\nitems, that we will get to later. Aside from that, you can see just how easy it is\nto build and write dialogue. You have support for multi-line text, BBCode, branching\nand conditions. It's worth mentioning that <code class=\"language-text\">to: close</code>. Close isn't a dialogue point,\nbut instead it tells the system that the character is done talking to the player.</p>\n<h2 id=\"rendering-dialogue\" style=\"position:relative;\"><a href=\"#rendering-dialogue\" aria-label=\"rendering dialogue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering Dialogue</h2>\n<p>Now that we can read the YAML file and build out dialogue, how do we display it?\nWell, on interact with the NPC (or whatever it is that has dialogue), the following\nis called:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\">_dialogueManager<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>dialoguePath<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetAnimationTree</span><span class=\"token punctuation\">(</span>_animationTree<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">FindConversation</span><span class=\"token punctuation\">(</span>_state<span class=\"token punctuation\">.</span>RelationshipLevel<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ShowIntroduction</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_state<span class=\"token punctuation\">.</span>Introduced<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This call chain should be relatively straightforward. The dialogue manager is told\nto read a dialogue from a specified path and load it up, the animation tree (to play\nanimations) is set, a conversation is search for (ignore the RelationshipLevel for now),\nwhich may be replaced if we have not been introduced yet, and then rendered.</p>\n<p>For finding a conversation, we essentially just loop through all of the conversations\nin the dialogue, and check to see if they match the conditions, if so, we store that.\nRendering is where it gets most interesting, here we load the text into a\n<a href=\"https://docs.godotengine.org/en/stable/tutorials/gui/bbcode_in_richtextlabel.html\">RichTextLabel</a>'s BbcodeText property, build out the buttons that should exist\nin the responses list, and then display the dialogue window.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Control</span> child <span class=\"token keyword\">in</span> _actionsContainer<span class=\"token punctuation\">.</span><span class=\"token function\">GetChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    child<span class=\"token punctuation\">.</span><span class=\"token function\">QueueFree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_conversation<span class=\"token punctuation\">.</span>Responses<span class=\"token punctuation\">?.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token keyword\">in</span> _conversation<span class=\"token punctuation\">.</span>Responses<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nextBtn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextBtn<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span>\n        nextBtn<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pressed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_OnActionPressed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> response<span class=\"token punctuation\">.</span>To <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _actionsContainer<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>nextBtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_conversation<span class=\"token punctuation\">.</span>To <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> _conversation<span class=\"token punctuation\">.</span>To <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nextBtn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nextBtn<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_conversation<span class=\"token punctuation\">.</span>To <span class=\"token operator\">==</span> <span class=\"token string\">\"close\"</span><span class=\"token punctuation\">)</span>\n        nextBtn<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Bye!\"</span><span class=\"token punctuation\">;</span>\n    nextBtn<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pressed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_OnActionPressed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> _conversation<span class=\"token punctuation\">.</span>To <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _actionsContainer<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>nextBtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Missing responses and to in dialogue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In here, you can see that if we have responses, that we create buttons and add\nit to our _actionsContainer, otherwise, we check that we have a to, and create\nan action based on that. If neither exist, we throw an exception, which would\nhopefully be caught in testing.</p>\n<p>One other important thing to note, however, is I also set the RichTextLabel's\nVisibleCharacters property to 0, so that it can start writing out the text.</p>\n<h2 id=\"gibberish-chatter\" style=\"position:relative;\"><a href=\"#gibberish-chatter\" aria-label=\"gibberish chatter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gibberish Chatter</h2>\n<p>For writing out text, I didn't want it to be dead silent, nor did I want to have\nto record all the text in the game, so I made a system similar to Animal Crossing,\nto allow gibberish-sounding speach to come out. When I decided to do it this way,\nI remembered a YouTube video I saw about it by <a href=\"https://www.youtube.com/watch?v=4W57Wy6veUM&#x26;feature=emb_logo\">Blipsounds</a>. I recorded myself\nspeaking every letter of the alphabet, as well as the numbers 0-9, sped them up\n2.5x, and then split them each into their own audio file, named their letter.\nIn the DialogueManager, I loaded in all the files into a dictionary with their\ncharacter as the key, and the sound file as their value.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> chars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"j\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncharacterSounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> AudioStream<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ch <span class=\"token keyword\">in</span> chars<span class=\"token punctuation\">)</span>\n    characterSounds<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ResourceLoader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioStream<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"res://Assets/Audio/Dialog/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">ch</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.ogg\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I also created a queue of audio players, with a large number of audio players,\nso that they can play slightly over each other, without things being cut off, or\njust not playing at all.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\">_audioPlayers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Queue<span class=\"token punctuation\">&lt;</span>AudioStreamPlayer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> textSpeed <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AudioStreamPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    player<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finished\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_OnStreamFinished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AudioStreamPlayer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> player <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    player<span class=\"token punctuation\">.</span>Bus <span class=\"token operator\">=</span> AudioManager<span class=\"token punctuation\">.</span>DIALOG_BUS<span class=\"token punctuation\">;</span>\n    _audioPlayers<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">_OnStreamFinished</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AudioStreamPlayer</span> streamPlayer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    _audioPlayers<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>streamPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then in the <code class=\"language-text\">_Process</code> command, we start revealing characters, and when a new\ncharacter appears, play it's audio byte.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">_Process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> delta<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If we have no text to display, then exit early.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_text<span class=\"token punctuation\">.</span>VisibleCharacters <span class=\"token operator\">>=</span> _text<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get what the visible characters is at prior to adjusting it, so we can</span>\n    <span class=\"token comment\">//  guarantee we don't make too many sounds.</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> before <span class=\"token operator\">=</span> _text<span class=\"token punctuation\">.</span>VisibleCharacters<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// _displayAmount is a float so that we don't show hundreds of characters in a second</span>\n    _displayAmount <span class=\"token operator\">+=</span> delta <span class=\"token operator\">*</span> textSpeed<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// And then round it to an Int, to see where are at.</span>\n    _text<span class=\"token punctuation\">.</span>VisibleCharacters <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">RoundToInt</span><span class=\"token punctuation\">(</span>_displayAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Return early if we should not make any sounds</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_text<span class=\"token punctuation\">.</span>VisibleCharacters <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> before <span class=\"token operator\">>=</span> _text<span class=\"token punctuation\">.</span>VisibleCharacters<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get the latest visible character and play that sound.</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> curChar <span class=\"token operator\">=</span> _text<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">[</span>_text<span class=\"token punctuation\">.</span>VisibleCharacters <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>characterSounds<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>curChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _audioPlayers<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> audio <span class=\"token operator\">=</span> _audioPlayers<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        audio<span class=\"token punctuation\">.</span>Stream <span class=\"token operator\">=</span> characterSounds<span class=\"token punctuation\">[</span>curChar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        audio<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then, I just made it so that if you click on the dialogue window, it fills\nin all the text, and that's really all that remains.</p>\n<p>There is still a lot of code I didn't show, but this should give you an idea\nof how to approach this, and aside from YAML, pretty much all of this should\nbe achievable in gdscript as well.</p>\n<h2 id=\"adding-items\" style=\"position:relative;\"><a href=\"#adding-items\" aria-label=\"adding items permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding items</h2>\n<p>The last thing worth mentioning are those <code class=\"language-text\">[item]</code> bbcode statements.\nThese allow me to add items to the player by just having it in the text that the\ncharacter speaks.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PH<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span>DialogueSystem<span class=\"token punctuation\">.</span>BBCode</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tool</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassName</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddItem</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">RichTextEffect</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> bbcode <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Signal</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Appeared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> itemPath<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> _added <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">_ProcessCustomFx</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharFXTransform</span> charFx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            charFx<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            charFx<span class=\"token punctuation\">.</span>Offset <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Get&lt;T>() is an extension method I made, because Godot is missing so</span>\n            <span class=\"token comment\">//  many generic methods.</span>\n            <span class=\"token comment\">// This allows us to stick a random (non letter) character in, and just hide it,</span>\n            <span class=\"token comment\">//  instead of displaying some blue text.</span>\n            charFx<span class=\"token punctuation\">.</span>Visible <span class=\"token operator\">=</span> charFx<span class=\"token punctuation\">.</span>Env<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// All items are in subfolders of this root folder, so let's hard hardcode</span>\n            <span class=\"token comment\">//  the first part of this path, to allow shorter paths in the dialogue.</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> itemPath <span class=\"token operator\">=</span> <span class=\"token string\">\"res://Scenes/GameObjects/Items/\"</span> <span class=\"token operator\">+</span> charFx<span class=\"token punctuation\">.</span>Env<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> count <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">RoundToInt</span><span class=\"token punctuation\">(</span>charFx<span class=\"token punctuation\">.</span>Env<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> key <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">itemPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">count</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_added<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>_added<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">EmitSignal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Appeared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> itemPath<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnAppeared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> itemPath<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SceneTree</span> tree<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _added<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">itemPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">count</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> itemScene <span class=\"token operator\">=</span> ResourceLoader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PackedScene<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>itemPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itemScene <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token operator\">=</span> itemScene<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Instance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Item<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tree<span class=\"token punctuation\">.</span>Root<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetNode</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>UI<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>UI<span class=\"token punctuation\">.</span>ROOT_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Inventory<span class=\"token punctuation\">.</span><span class=\"token function\">AddItemToNextSlot</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnHide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _added <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Two important things to note right off the bat:</p>\n<ol>\n<li>The use of the <code class=\"language-text\">Tool</code> Attribute. According to the <a href=\"https://docs.godotengine.org/en/stable/tutorials/gui/bbcode_in_richtextlabel.html\">RichTextLabel</a> documentation,\n<code class=\"language-text\">RichTextEffect</code>s need to be marked as Tools.</li>\n<li>The <code class=\"language-text\">ClassName</code> attribute. This is <a href=\"https://github.com/m50/Godot-CSharp-Node-Exports\">my class_name C# plugin</a>\nin action, allowing the exporting of custom resources.</li>\n</ol>\n<p>Aside from that, I had to create a public variable called <code class=\"language-text\">bbcode</code> (HAS to be all lowercase),\nthat allows me to declare what the bbcode text is, and then I use signals combined with\nsome internal functions to have an effect. Since resources have no access to the scene,\nyou have to pass the scene into them. To do this here, I pass it in via a signal, which\nis connected through a simple script on the RichTextLabel.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PH<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span>DialogueSystem</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BBText</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">RichTextLabel</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">_EnterTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RichTextEffect</span> effect <span class=\"token keyword\">in</span> CustomEffects<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span><span class=\"token function\">HasSignal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Appeared\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> effect<span class=\"token punctuation\">.</span><span class=\"token function\">HasMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnAppeared\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    effect<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Appeared\"</span><span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">,</span> <span class=\"token string\">\"OnAppeared\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SceneTree<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">GetTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span><span class=\"token function\">HasMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnHide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hide\"</span><span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">,</span> <span class=\"token string\">\"OnHide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It is pretty straight forward, for each custom effect, connect the signals as needed.</p>\n<h1 id=\"schedules\" style=\"position:relative;\"><a href=\"#schedules\" aria-label=\"schedules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schedules</h1>\n<blockquote>\n<p>!! No video for this one, not much to show, sorry! !!</p>\n</blockquote>\n<p>Schedules are an interesting thing. They require that you have some sort of time\nsystem in your game. In mine, I have a time manager which stores the second, minute,\nhour, day, and season (month) of the game. Then seconds are counted using <code class=\"language-text\">_Process</code>,\nand when seconds hit 60, it counds up a minute, and when that hits 60, it counds up\nan hour, etc. It's a pretty straightforward and simple time system. One important\nthing to note is that anytime the minutes and hours change, signals are emitted.\nThose signals are tied into the NPC for scheduling purposes.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token comment\">// These are some autowire attributes I created.</span>\n<span class=\"token comment\">// https://github.com/m50/Godot-CSharp-Autowire</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>TimeManager<span class=\"token punctuation\">.</span>ROOT_PATH<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>TimeManager<span class=\"token punctuation\">.</span>MinuteChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Connect</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>TimeManager<span class=\"token punctuation\">.</span>ROOT_PATH<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>TimeManager<span class=\"token punctuation\">.</span>HourChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">_OnTimeChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> <span class=\"token keyword\">by</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> curEvent <span class=\"token operator\">=</span> _scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentEvent</span><span class=\"token punctuation\">(</span>\n        _timeManager<span class=\"token punctuation\">.</span>Hours<span class=\"token punctuation\">,</span> _timeManager<span class=\"token punctuation\">.</span>Minutes<span class=\"token punctuation\">,</span>\n        _timeManager<span class=\"token punctuation\">.</span>Day<span class=\"token punctuation\">,</span> _timeManager<span class=\"token punctuation\">.</span>Season\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curEvent <span class=\"token operator\">!=</span> _CurEvent<span class=\"token punctuation\">)</span>\n        _CurEvent <span class=\"token operator\">=</span> curEvent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As we can see, anytime the time changes, we get the current event from our scheduler\ninstance, and then if the current event is different, we set a new current event.\n<code class=\"language-text\">_CurEvent</code> is a property that kicks off new navigation.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Scheduler<span class=\"token punctuation\">.</span>Event</span> _CurEvent\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> _curEvent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">set</span>\n    <span class=\"token punctuation\">{</span>\n        _curEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n        _navigator<span class=\"token punctuation\">.</span><span class=\"token function\">NavigateTo</span><span class=\"token punctuation\">(</span>_curEvent<span class=\"token punctuation\">.</span>Scene<span class=\"token punctuation\">,</span> _curEvent<span class=\"token punctuation\">.</span>PointOfInterest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now, I won't go into the relatively complex data model for the scheduler, but\nI will just give a small snippet of the schedule:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">monday</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">hour</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span>\n        <span class=\"token key atrule\">minute</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n      <span class=\"token key atrule\">pointOfInterest</span><span class=\"token punctuation\">:</span> Cottage\n      <span class=\"token key atrule\">scene</span><span class=\"token punctuation\">:</span> TestWorld\n      <span class=\"token key atrule\">facing</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">\"x\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n        <span class=\"token key atrule\">\"y\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token key atrule\">specialEvents</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">day</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token key atrule\">season</span><span class=\"token punctuation\">:</span> Spring\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n        <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>\n        <span class=\"token key atrule\">pointOfInterest</span><span class=\"token punctuation\">:</span> SouthShore\n        <span class=\"token key atrule\">scene</span><span class=\"token punctuation\">:</span> TestWorld2\n        <span class=\"token key atrule\">facing</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">\"x\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n          <span class=\"token key atrule\">\"y\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">-1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see here, the data model is broken up into 5 categories, the 4 seasons\nand specialEvents. The 4 seasons are broken up into the days of the weeks, and then a\nschedule is provided for the days, as an array of objects, containg the from and to\ntime, and where and what direction they should be standing. From/to can take just a\nnumber to set the hour, or can take an object of hour and minute. This is handled with a custom\ncast on my timestamp object. Special events are stored as an array of objects, containg a\nday and season of the special event, and what their schedule (the events) is for that day.\nThis allows me to have characters run to special locations on their birthday, anniversary,\nor holiday for example.</p>\n<p>The <code class=\"language-text\">pointOfInterest</code> is a node path from a root <code class=\"language-text\">PointsOfInterest</code> Node2D object,\nin the specified <code class=\"language-text\">scene</code>. This allows me to place a bunch of Position2Ds in a scene\nand name them special names to make it easy enough to find them. My GameManager script\nhandles returning <code class=\"language-text\">Level</code> objects, which are what I am calling <code class=\"language-text\">scene</code> here.</p>\n<p>To get the current event, as seen earlier, it's pretty straight forward:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Event</span> <span class=\"token function\">GetCurrentEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> hour<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> minute<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> day<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeManager<span class=\"token punctuation\">.</span>Seasons</span> season<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> events <span class=\"token operator\">=</span> _schedule<span class=\"token punctuation\">.</span><span class=\"token function\">GetSpecialEvent</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">,</span> season<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>events <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        events <span class=\"token operator\">=</span> _schedule<span class=\"token punctuation\">.</span><span class=\"token function\">GetSeason</span><span class=\"token punctuation\">(</span>season<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> events<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TimeStamp</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>First, I ask the schedule to find a special event for the day/season that we are in,\nelse finds the events for the day of the week for the season we are in,\nthen we get the first event that contains the specified hour/minute. One important\npoint of the contains is that time wrapping exists, so we need to account for <code class=\"language-text\">from</code>\nand <code class=\"language-text\">to</code> wrapping over the 24hr barrier.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeStamp</span> timeslot<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pastFrom <span class=\"token operator\">=</span> From<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&lt;=</span> timeslot<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>From<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">&lt;=</span> timeslot<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">||</span> From<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> beforeTo <span class=\"token operator\">=</span> To<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">></span> timeslot<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>To<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">></span> timeslot<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">||</span> To<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>From<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">></span> To<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&amp;&amp;</span> timeslot<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n        beforeTo <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>From<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">></span> To<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&amp;&amp;</span> timeslot<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        pastFrom <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> pastFrom <span class=\"token operator\">&amp;&amp;</span> beforeTo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There isn't anything more to it, outside of the extensive data model. The structs each\ncontain some helper functions and comparison tools and what not, to make working\nwith the data model easier. Here is a screenshot of the data model folded up, to\ngive a bit of an overview of all the components:</p>\n<div style=\"display: flex; justify-content: center;\">\n    <img width=\"500\" src=\"/assets/images/schedule_datamodel.png\"\n        alt=\"Schedule Datamodel screenshot, containing: TimeStamp, Event, Season, SpecialEvent, Schedule\">\n</div>\n<h1 id=\"navigation\" style=\"position:relative;\"><a href=\"#navigation\" aria-label=\"navigation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation</h1>\n<p>As seen earlier, we have a navigator class, which handles all the navigation\n(using Navigation2D nodes from Godot) for the character. Once we have a pointOfInterest,\nthe Navigator class looks it up, and builds a path.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">NavigateTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> scene<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pointOfInterest<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Return early if we don't know where we are going.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scene <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> pointOfInterest <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> scene <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> pointOfInterest <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> destScene <span class=\"token operator\">=</span> _gameManager<span class=\"token punctuation\">.</span><span class=\"token function\">GetScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> poi <span class=\"token operator\">=</span> destScene<span class=\"token punctuation\">.</span>PointsOfInterest<span class=\"token punctuation\">[</span>pointOfInterest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// If we have a path already, let's clear it. There was likely a time jump.</span>\n    _navPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// If the NPC's destination is not in it's current scene:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NPC<span class=\"token punctuation\">.</span>CurrentScene<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> scene<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Find the doorway to the scene we need to go to</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> doorway <span class=\"token operator\">=</span> NPC<span class=\"token punctuation\">.</span>CurrentScene<span class=\"token punctuation\">.</span><span class=\"token function\">FindDoorwayTo</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// and find the point to be able to travel.</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> doorwayPoint <span class=\"token operator\">=</span> doorway<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetNode</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CollisionShape2D<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CollisionShape2D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Get the path.</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> points <span class=\"token operator\">=</span> NPC<span class=\"token punctuation\">.</span>CurrentScene<span class=\"token punctuation\">.</span>Navigation2D\n            <span class=\"token punctuation\">.</span><span class=\"token function\">GetSimplePath</span><span class=\"token punctuation\">(</span>NPC<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">,</span> doorwayPoint<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">+</span> doorway<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> point <span class=\"token keyword\">in</span> points<span class=\"token punctuation\">)</span>\n            _navPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// After we get the path to the scene switcher, we get the path to our</span>\n        <span class=\"token comment\">//  point of interest.</span>\n        points <span class=\"token operator\">=</span> _gameManager<span class=\"token punctuation\">.</span><span class=\"token function\">GetScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Navigation2D\n            <span class=\"token punctuation\">.</span><span class=\"token function\">GetSimplePath</span><span class=\"token punctuation\">(</span>doorway<span class=\"token punctuation\">.</span>positionInNewScene<span class=\"token punctuation\">,</span> poi<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> point <span class=\"token keyword\">in</span> points<span class=\"token punctuation\">)</span>\n            _navPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Else, it's destination is in it's current scene, so this is pretty simple,</span>\n    <span class=\"token comment\">//  get the path, and queue up the points.</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Queue<span class=\"token punctuation\">&lt;</span>Vector2<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>NPC<span class=\"token punctuation\">.</span>CurrentScene<span class=\"token punctuation\">.</span>Navigation2D\n            <span class=\"token punctuation\">.</span><span class=\"token function\">GetSimplePath</span><span class=\"token punctuation\">(</span>NPC<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">,</span> poi<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> point <span class=\"token keyword\">in</span> points<span class=\"token punctuation\">)</span>\n            _navPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>One thing I got caught on, so I will make a point to mention it here, all the\ndestination points need to be relative to the Navigation2D. In this case, the\nYSort that the NPC belongs to, the Navigation2D, and the doorway are all relative\nto the same root node: the scene, so we need to make sure all our positions are relative\nto that. This is why there is no use of GlobalPosition. I generally work in GlobalPosition,\nas it is more accurate, but it actually breaks things with Navigation2D! If you\nknow how to get Navigation2D to work in GlobalPosition, please let me know on twitter!</p>\n<p>Once we have a path, we need to actually walk to it! This is handled in the <code class=\"language-text\">_Process</code>\nmethod. Here, we get the next point we are traveling to, and if we aren't currently\ntraveling to a point, we move into a MoveTo state, which moves our character to that point.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">_Process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> delta<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_navPoints<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nextPoint <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> nextPoint <span class=\"token operator\">=</span> _navPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextPoint <span class=\"token operator\">==</span> Vector2<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">)</span>\n        NPC<span class=\"token punctuation\">.</span>StateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">Travel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Idle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_currentlyTraveling<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        GD<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moving to \"</span><span class=\"token punctuation\">,</span> nextPoint<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\" with offset \"</span><span class=\"token punctuation\">,</span> NPC<span class=\"token punctuation\">.</span>CurrentScene<span class=\"token punctuation\">.</span>GlobalPosition<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\" equating to \"</span><span class=\"token punctuation\">,</span> nextPoint <span class=\"token operator\">+</span> NPC<span class=\"token punctuation\">.</span>CurrentScene<span class=\"token punctuation\">.</span>GlobalPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextPoint <span class=\"token operator\">+=</span> NPC<span class=\"token punctuation\">.</span>CurrentScene<span class=\"token punctuation\">.</span>GlobalPosition<span class=\"token punctuation\">;</span>\n        _currentlyTraveling <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        NPC<span class=\"token punctuation\">.</span>StateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">Travel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MoveTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> moveToState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NPC<span class=\"token punctuation\">.</span>StateMachine<span class=\"token punctuation\">.</span>CurrentState <span class=\"token keyword\">as</span> <span class=\"token class-name\">MoveTo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        moveToState<span class=\"token punctuation\">.</span>MovePoint <span class=\"token operator\">=</span> nextPoint<span class=\"token punctuation\">;</span>\n        FacingDir <span class=\"token operator\">=</span> NPC<span class=\"token punctuation\">.</span>GlobalPosition<span class=\"token punctuation\">.</span><span class=\"token function\">DirectionTo</span><span class=\"token punctuation\">(</span>nextPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then, once the character arrives, we turn it to face the direction outlined in\nit's schedule. There is also support here for playing an animation, however this\nwill likely change to specifying a state (such as <code class=\"language-text\">Fishing</code> for example) that\nmakes the NPC use a specific codified state, rather than just an animation state.</p>\n<h1 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h1>\n<p>That is all there really is to the implementation. I skimmed over quite a bit,\nas this was already quite long as is, and skipped over huge chunks of the code.\nMost of it should be pretty easy to fill in the gaps of. This was mostly meant to\nbe an outline, rather than a step-by-step tutorial (if it were that, I'd probably\nhave broken this up into multiple articles, because wow, this is long!). It's important\nto re-iterate that if you are a gdscript developer, all of this is possible there\nas well, the key differences being that you won't be able to pre-define a data\nmodel like I did, and instead everything existing in a dictionary, and you will\nbe required to use JSON rather than YAML (though, there is a <a href=\"https://github.com/Beliaar/godot-yaml\">yaml plugin</a>,\nso if you can build the C++ code for it, you should be good to go).</p>\n<p>Keep an eye out for my blog post actually discussing my game, as well as future\nposts about other cool things I build for the game.</p>\n<p>And if you read to here, you deserve a cookie! 🍪</p>","frontmatter":{"slug":"godot/2020/10/05/making-npc-system-in-godot.html","title":"Making Dialogue and Navigation for NPCs in Godot","image":"https://miro.medium.com/fit/c/1838/551/1*eKkwVGe7_wF14PkJiotSdg.jpeg","date":"October 05, 2020","dateModified":"January 19, 2021"}}},"pageContext":{"slug":"godot/2020/10/05/making-npc-system-in-godot.html"}},"staticQueryHashes":["1533934418"]}